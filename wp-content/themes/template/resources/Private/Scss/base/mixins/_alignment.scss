//
// Align content from container to viewport
// Calculates gap between viewport and container and stretches element to viewport side(s)
//
// TODO
//

@mixin align-to-viewport($side: null, $stretchOnMobile: true) {
  // Stretch on XS
  @if ($stretchOnMobile == true) {
    margin-left: -($container-padding-x + $container-padding-x-xs * 0.5);
    margin-right: -($container-padding-x + $container-padding-x-xs * 0.5);
  } @else {
    margin-left: 0;
    margin-right: 0;
  }
  // Each breakpoint above XS
  $container-max-width-mobile: map-get($container-max-widths, $mobile-breakpoint);
  @each $breakpoint, $container-max-width in $container-max-widths {
    @include media-breakpoint-up($breakpoint) {
      @if ($container-max-width < $container-max-width-mobile) {
        // Under mobile breakpoint
        @if ($stretchOnMobile == true) {
          margin-left: calc((100vw - #{$container-max-width} + #{$grid-gutter-width}) / -2);
          margin-right: calc((100vw - #{$container-max-width} + #{$grid-gutter-width}) / -2);
        } @else {
          margin-left: 0;
          margin-right: 0;
        }
      } @else {
        // Above mobile breakpoint
        @if ($side == "left") or ($side == "right") {
          margin-#{$side}: calc((100vw - #{$container-max-width} + #{$grid-gutter-width}) / -2);
          @if ($side == "left") { margin-right: 0 }
          @if ($side == "right") { margin-left: 0 }
        } @else {
          margin-left: calc((100vw - #{$container-max-width} + #{$grid-gutter-width}) / -2);
          margin-right: calc((100vw - #{$container-max-width} + #{$grid-gutter-width}) / -2);
        }
      }
    }
  }
}
